	component frontier is
		port (
			m0_RSTN                   : in    std_logic                     := 'X';             -- RSTN
			m0_CLK                    : in    std_logic                     := 'X';             -- CLK
			m0_ADDR                   : in    std_logic_vector(21 downto 0) := (others => 'X'); -- ADDR
			m0_DATA                   : inout std_logic_vector(31 downto 0) := (others => 'X'); -- DATA
			m0_CSN                    : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- CSN
			m0_BEN                    : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- BEN
			m0_RDN                    : in    std_logic                     := 'X';             -- RDN
			m0_WRN                    : in    std_logic                     := 'X';             -- WRN
			m0_WAITN                  : out   std_logic;                                        -- WAITN
			m0_EINT                   : out   std_logic_vector(9 downto 0);                     -- EINT
			led_f0_R                  : out   std_logic;                                        -- R
			led_f0_G                  : out   std_logic;                                        -- G
			led_f0_B                  : out   std_logic;                                        -- B
			led_f1_R                  : out   std_logic;                                        -- R
			led_f1_G                  : out   std_logic;                                        -- G
			led_f1_B                  : out   std_logic;                                        -- B
			led_f2_R                  : out   std_logic;                                        -- R
			led_f2_G                  : out   std_logic;                                        -- G
			led_f2_B                  : out   std_logic;                                        -- B
			led_f3_R                  : out   std_logic;                                        -- R
			led_f3_G                  : out   std_logic;                                        -- G
			led_f3_B                  : out   std_logic;                                        -- B
			shield_ctrl_A_OCN         : in    std_logic                     := 'X';             -- A_OCN
			shield_ctrl_A_PWREN       : out   std_logic;                                        -- A_PWREN
			shield_ctrl_A_HOE         : out   std_logic;                                        -- A_HOE
			shield_ctrl_A_LOE         : out   std_logic;                                        -- A_LOE
			shield_ctrl_B_OCN         : in    std_logic                     := 'X';             -- B_OCN
			shield_ctrl_B_PWREN       : out   std_logic;                                        -- B_PWREN
			shield_ctrl_B_HOE         : out   std_logic;                                        -- B_HOE
			shield_ctrl_B_LOE         : out   std_logic;                                        -- B_LOE
			brush_motor_driver_1_HX   : out   std_logic;                                        -- HX
			brush_motor_driver_1_HY   : out   std_logic;                                        -- HY
			position_encoder_1_A      : in    std_logic                     := 'X';             -- A
			position_encoder_1_B      : in    std_logic                     := 'X';             -- B
			position_encoder_1_Z      : in    std_logic                     := 'X';             -- Z
			position_encoder_2_A      : in    std_logic                     := 'X';             -- A
			position_encoder_2_B      : in    std_logic                     := 'X';             -- B
			position_encoder_2_Z      : in    std_logic                     := 'X';             -- Z
			position_encoder_3_A      : in    std_logic                     := 'X';             -- A
			position_encoder_3_B      : in    std_logic                     := 'X';             -- B
			position_encoder_3_Z      : in    std_logic                     := 'X';             -- Z
			brush_motor_driver_0_HX   : out   std_logic;                                        -- HX
			brush_motor_driver_0_HY   : out   std_logic;                                        -- HY
			qsys_serial_device_0_sdo  : out   std_logic;                                        -- sdo
			qsys_serial_device_0_sdi  : in    std_logic                     := 'X';             -- sdi
			qsys_serial_device_0_clk  : out   std_logic;                                        -- clk
			qsys_serial_device_0_sle  : out   std_logic;                                        -- sle
			qsys_serial_device_0_srdy : in    std_logic                     := 'X'              -- srdy
		);
	end component frontier;

