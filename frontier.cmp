	component frontier is
		port (
			m0_RSTN                   : in    std_logic                     := 'X';             -- RSTN
			m0_CLK                    : in    std_logic                     := 'X';             -- CLK
			m0_ADDR                   : in    std_logic_vector(21 downto 0) := (others => 'X'); -- ADDR
			m0_DATA                   : inout std_logic_vector(31 downto 0) := (others => 'X'); -- DATA
			m0_CSN                    : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- CSN
			m0_BEN                    : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- BEN
			m0_RDN                    : in    std_logic                     := 'X';             -- RDN
			m0_WRN                    : in    std_logic                     := 'X';             -- WRN
			m0_WAITN                  : out   std_logic;                                        -- WAITN
			m0_EINT                   : out   std_logic_vector(9 downto 0);                     -- EINT
			led_f0_R                  : out   std_logic;                                        -- R
			led_f0_G                  : out   std_logic;                                        -- G
			led_f0_B                  : out   std_logic;                                        -- B
			led_f1_R                  : out   std_logic;                                        -- R
			led_f1_G                  : out   std_logic;                                        -- G
			led_f1_B                  : out   std_logic;                                        -- B
			led_f2_R                  : out   std_logic;                                        -- R
			led_f2_G                  : out   std_logic;                                        -- G
			led_f2_B                  : out   std_logic;                                        -- B
			led_f3_R                  : out   std_logic;                                        -- R
			led_f3_G                  : out   std_logic;                                        -- G
			led_f3_B                  : out   std_logic;                                        -- B
			shield_ctrl_A_OCN         : in    std_logic                     := 'X';             -- A_OCN
			shield_ctrl_A_PWREN       : out   std_logic;                                        -- A_PWREN
			shield_ctrl_A_HOE         : out   std_logic;                                        -- A_HOE
			shield_ctrl_A_LOE         : out   std_logic;                                        -- A_LOE
			shield_ctrl_B_OCN         : in    std_logic                     := 'X';             -- B_OCN
			shield_ctrl_B_PWREN       : out   std_logic;                                        -- B_PWREN
			shield_ctrl_B_HOE         : out   std_logic;                                        -- B_HOE
			shield_ctrl_B_LOE         : out   std_logic;                                        -- B_LOE
			step_motor_driver_0_AX    : out   std_logic;                                        -- AX
			step_motor_driver_0_AY    : out   std_logic;                                        -- AY
			step_motor_driver_0_BX    : out   std_logic;                                        -- BX
			step_motor_driver_0_BY    : out   std_logic;                                        -- BY
			step_motor_driver_0_AE    : out   std_logic;                                        -- AE
			step_motor_driver_0_BE    : out   std_logic;                                        -- BE
			step_motor_driver_1_AX    : out   std_logic;                                        -- AX
			step_motor_driver_1_AY    : out   std_logic;                                        -- AY
			step_motor_driver_1_BX    : out   std_logic;                                        -- BX
			step_motor_driver_1_BY    : out   std_logic;                                        -- BY
			step_motor_driver_1_AE    : out   std_logic;                                        -- AE
			step_motor_driver_1_BE    : out   std_logic;                                        -- BE
			step_motor_driver_2_AX    : out   std_logic;                                        -- AX
			step_motor_driver_2_AY    : out   std_logic;                                        -- AY
			step_motor_driver_2_BX    : out   std_logic;                                        -- BX
			step_motor_driver_2_BY    : out   std_logic;                                        -- BY
			step_motor_driver_2_AE    : out   std_logic;                                        -- AE
			step_motor_driver_2_BE    : out   std_logic;                                        -- BE
			step_motor_driver_3_AX    : out   std_logic;                                        -- AX
			step_motor_driver_3_AY    : out   std_logic;                                        -- AY
			step_motor_driver_3_BX    : out   std_logic;                                        -- BX
			step_motor_driver_3_BY    : out   std_logic;                                        -- BY
			step_motor_driver_3_AE    : out   std_logic;                                        -- AE
			step_motor_driver_3_BE    : out   std_logic;                                        -- BE
			step_motor_driver_4_AX    : out   std_logic;                                        -- AX
			step_motor_driver_4_AY    : out   std_logic;                                        -- AY
			step_motor_driver_4_BX    : out   std_logic;                                        -- BX
			step_motor_driver_4_BY    : out   std_logic;                                        -- BY
			step_motor_driver_4_AE    : out   std_logic;                                        -- AE
			step_motor_driver_4_BE    : out   std_logic;                                        -- BE
			sht1x_sensor_0_sck        : out   std_logic;                                        -- sck
			sht1x_sensor_0_sda        : inout std_logic                     := 'X';             -- sda
			sht1x_sensor_0_dir        : out   std_logic;                                        -- dir
			sht1x_sensor_1_sck        : out   std_logic;                                        -- sck
			sht1x_sensor_1_sda        : inout std_logic                     := 'X';             -- sda
			sht1x_sensor_1_dir        : out   std_logic;                                        -- dir
			qsys_serial_device_0_sdo  : out   std_logic;                                        -- sdo
			qsys_serial_device_0_sdi  : in    std_logic                     := 'X';             -- sdi
			qsys_serial_device_0_clk  : out   std_logic;                                        -- clk
			qsys_serial_device_0_sle  : out   std_logic;                                        -- sle
			qsys_serial_device_0_srdy : in    std_logic                     := 'X';             -- srdy
			epl_bus_SCLK              : out   std_logic;                                        -- SCLK
			epl_bus_SDI               : out   std_logic;                                        -- SDI
			epl_bus_SDO               : in    std_logic                     := 'X';             -- SDO
			epl_bus_SLE               : out   std_logic;                                        -- SLE
			epl_bus_INT               : in    std_logic                     := 'X'              -- INT
		);
	end component frontier;

